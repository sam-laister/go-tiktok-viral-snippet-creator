// Code generated by ent, DO NOT EDIT.

package clip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sam-laister/tiktok-creator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldHash, v))
}

// AudioPath applies equality check predicate on the "audio_path" field. It's identical to AudioPathEQ.
func AudioPath(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldAudioPath, v))
}

// VideoPath applies equality check predicate on the "video_path" field. It's identical to VideoPathEQ.
func VideoPath(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldVideoPath, v))
}

// GenCaptionsPath applies equality check predicate on the "gen_captions_path" field. It's identical to GenCaptionsPathEQ.
func GenCaptionsPath(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenCaptionsPath, v))
}

// GenRawVideoPath applies equality check predicate on the "gen_raw_video_path" field. It's identical to GenRawVideoPathEQ.
func GenRawVideoPath(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenRawVideoPath, v))
}

// GenTrimmedVideoPath applies equality check predicate on the "gen_trimmed_video_path" field. It's identical to GenTrimmedVideoPathEQ.
func GenTrimmedVideoPath(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenTrimmedVideoPath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldDeletedAt, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldHash, v))
}

// AudioPathEQ applies the EQ predicate on the "audio_path" field.
func AudioPathEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldAudioPath, v))
}

// AudioPathNEQ applies the NEQ predicate on the "audio_path" field.
func AudioPathNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldAudioPath, v))
}

// AudioPathIn applies the In predicate on the "audio_path" field.
func AudioPathIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldAudioPath, vs...))
}

// AudioPathNotIn applies the NotIn predicate on the "audio_path" field.
func AudioPathNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldAudioPath, vs...))
}

// AudioPathGT applies the GT predicate on the "audio_path" field.
func AudioPathGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldAudioPath, v))
}

// AudioPathGTE applies the GTE predicate on the "audio_path" field.
func AudioPathGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldAudioPath, v))
}

// AudioPathLT applies the LT predicate on the "audio_path" field.
func AudioPathLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldAudioPath, v))
}

// AudioPathLTE applies the LTE predicate on the "audio_path" field.
func AudioPathLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldAudioPath, v))
}

// AudioPathContains applies the Contains predicate on the "audio_path" field.
func AudioPathContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldAudioPath, v))
}

// AudioPathHasPrefix applies the HasPrefix predicate on the "audio_path" field.
func AudioPathHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldAudioPath, v))
}

// AudioPathHasSuffix applies the HasSuffix predicate on the "audio_path" field.
func AudioPathHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldAudioPath, v))
}

// AudioPathEqualFold applies the EqualFold predicate on the "audio_path" field.
func AudioPathEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldAudioPath, v))
}

// AudioPathContainsFold applies the ContainsFold predicate on the "audio_path" field.
func AudioPathContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldAudioPath, v))
}

// VideoPathEQ applies the EQ predicate on the "video_path" field.
func VideoPathEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldVideoPath, v))
}

// VideoPathNEQ applies the NEQ predicate on the "video_path" field.
func VideoPathNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldVideoPath, v))
}

// VideoPathIn applies the In predicate on the "video_path" field.
func VideoPathIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldVideoPath, vs...))
}

// VideoPathNotIn applies the NotIn predicate on the "video_path" field.
func VideoPathNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldVideoPath, vs...))
}

// VideoPathGT applies the GT predicate on the "video_path" field.
func VideoPathGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldVideoPath, v))
}

// VideoPathGTE applies the GTE predicate on the "video_path" field.
func VideoPathGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldVideoPath, v))
}

// VideoPathLT applies the LT predicate on the "video_path" field.
func VideoPathLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldVideoPath, v))
}

// VideoPathLTE applies the LTE predicate on the "video_path" field.
func VideoPathLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldVideoPath, v))
}

// VideoPathContains applies the Contains predicate on the "video_path" field.
func VideoPathContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldVideoPath, v))
}

// VideoPathHasPrefix applies the HasPrefix predicate on the "video_path" field.
func VideoPathHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldVideoPath, v))
}

// VideoPathHasSuffix applies the HasSuffix predicate on the "video_path" field.
func VideoPathHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldVideoPath, v))
}

// VideoPathEqualFold applies the EqualFold predicate on the "video_path" field.
func VideoPathEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldVideoPath, v))
}

// VideoPathContainsFold applies the ContainsFold predicate on the "video_path" field.
func VideoPathContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldVideoPath, v))
}

// GenCaptionsPathEQ applies the EQ predicate on the "gen_captions_path" field.
func GenCaptionsPathEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenCaptionsPath, v))
}

// GenCaptionsPathNEQ applies the NEQ predicate on the "gen_captions_path" field.
func GenCaptionsPathNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldGenCaptionsPath, v))
}

// GenCaptionsPathIn applies the In predicate on the "gen_captions_path" field.
func GenCaptionsPathIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldGenCaptionsPath, vs...))
}

// GenCaptionsPathNotIn applies the NotIn predicate on the "gen_captions_path" field.
func GenCaptionsPathNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldGenCaptionsPath, vs...))
}

// GenCaptionsPathGT applies the GT predicate on the "gen_captions_path" field.
func GenCaptionsPathGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldGenCaptionsPath, v))
}

// GenCaptionsPathGTE applies the GTE predicate on the "gen_captions_path" field.
func GenCaptionsPathGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldGenCaptionsPath, v))
}

// GenCaptionsPathLT applies the LT predicate on the "gen_captions_path" field.
func GenCaptionsPathLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldGenCaptionsPath, v))
}

// GenCaptionsPathLTE applies the LTE predicate on the "gen_captions_path" field.
func GenCaptionsPathLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldGenCaptionsPath, v))
}

// GenCaptionsPathContains applies the Contains predicate on the "gen_captions_path" field.
func GenCaptionsPathContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldGenCaptionsPath, v))
}

// GenCaptionsPathHasPrefix applies the HasPrefix predicate on the "gen_captions_path" field.
func GenCaptionsPathHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldGenCaptionsPath, v))
}

// GenCaptionsPathHasSuffix applies the HasSuffix predicate on the "gen_captions_path" field.
func GenCaptionsPathHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldGenCaptionsPath, v))
}

// GenCaptionsPathIsNil applies the IsNil predicate on the "gen_captions_path" field.
func GenCaptionsPathIsNil() predicate.Clip {
	return predicate.Clip(sql.FieldIsNull(FieldGenCaptionsPath))
}

// GenCaptionsPathNotNil applies the NotNil predicate on the "gen_captions_path" field.
func GenCaptionsPathNotNil() predicate.Clip {
	return predicate.Clip(sql.FieldNotNull(FieldGenCaptionsPath))
}

// GenCaptionsPathEqualFold applies the EqualFold predicate on the "gen_captions_path" field.
func GenCaptionsPathEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldGenCaptionsPath, v))
}

// GenCaptionsPathContainsFold applies the ContainsFold predicate on the "gen_captions_path" field.
func GenCaptionsPathContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldGenCaptionsPath, v))
}

// GenRawVideoPathEQ applies the EQ predicate on the "gen_raw_video_path" field.
func GenRawVideoPathEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenRawVideoPath, v))
}

// GenRawVideoPathNEQ applies the NEQ predicate on the "gen_raw_video_path" field.
func GenRawVideoPathNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldGenRawVideoPath, v))
}

// GenRawVideoPathIn applies the In predicate on the "gen_raw_video_path" field.
func GenRawVideoPathIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldGenRawVideoPath, vs...))
}

// GenRawVideoPathNotIn applies the NotIn predicate on the "gen_raw_video_path" field.
func GenRawVideoPathNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldGenRawVideoPath, vs...))
}

// GenRawVideoPathGT applies the GT predicate on the "gen_raw_video_path" field.
func GenRawVideoPathGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldGenRawVideoPath, v))
}

// GenRawVideoPathGTE applies the GTE predicate on the "gen_raw_video_path" field.
func GenRawVideoPathGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldGenRawVideoPath, v))
}

// GenRawVideoPathLT applies the LT predicate on the "gen_raw_video_path" field.
func GenRawVideoPathLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldGenRawVideoPath, v))
}

// GenRawVideoPathLTE applies the LTE predicate on the "gen_raw_video_path" field.
func GenRawVideoPathLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldGenRawVideoPath, v))
}

// GenRawVideoPathContains applies the Contains predicate on the "gen_raw_video_path" field.
func GenRawVideoPathContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldGenRawVideoPath, v))
}

// GenRawVideoPathHasPrefix applies the HasPrefix predicate on the "gen_raw_video_path" field.
func GenRawVideoPathHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldGenRawVideoPath, v))
}

// GenRawVideoPathHasSuffix applies the HasSuffix predicate on the "gen_raw_video_path" field.
func GenRawVideoPathHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldGenRawVideoPath, v))
}

// GenRawVideoPathIsNil applies the IsNil predicate on the "gen_raw_video_path" field.
func GenRawVideoPathIsNil() predicate.Clip {
	return predicate.Clip(sql.FieldIsNull(FieldGenRawVideoPath))
}

// GenRawVideoPathNotNil applies the NotNil predicate on the "gen_raw_video_path" field.
func GenRawVideoPathNotNil() predicate.Clip {
	return predicate.Clip(sql.FieldNotNull(FieldGenRawVideoPath))
}

// GenRawVideoPathEqualFold applies the EqualFold predicate on the "gen_raw_video_path" field.
func GenRawVideoPathEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldGenRawVideoPath, v))
}

// GenRawVideoPathContainsFold applies the ContainsFold predicate on the "gen_raw_video_path" field.
func GenRawVideoPathContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldGenRawVideoPath, v))
}

// GenTrimmedVideoPathEQ applies the EQ predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathNEQ applies the NEQ predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathNEQ(v string) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathIn applies the In predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldGenTrimmedVideoPath, vs...))
}

// GenTrimmedVideoPathNotIn applies the NotIn predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathNotIn(vs ...string) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldGenTrimmedVideoPath, vs...))
}

// GenTrimmedVideoPathGT applies the GT predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathGT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathGTE applies the GTE predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathGTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathLT applies the LT predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathLT(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathLTE applies the LTE predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathLTE(v string) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathContains applies the Contains predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathContains(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContains(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathHasPrefix applies the HasPrefix predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathHasPrefix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasPrefix(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathHasSuffix applies the HasSuffix predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathHasSuffix(v string) predicate.Clip {
	return predicate.Clip(sql.FieldHasSuffix(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathIsNil applies the IsNil predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathIsNil() predicate.Clip {
	return predicate.Clip(sql.FieldIsNull(FieldGenTrimmedVideoPath))
}

// GenTrimmedVideoPathNotNil applies the NotNil predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathNotNil() predicate.Clip {
	return predicate.Clip(sql.FieldNotNull(FieldGenTrimmedVideoPath))
}

// GenTrimmedVideoPathEqualFold applies the EqualFold predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathEqualFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldEqualFold(FieldGenTrimmedVideoPath, v))
}

// GenTrimmedVideoPathContainsFold applies the ContainsFold predicate on the "gen_trimmed_video_path" field.
func GenTrimmedVideoPathContainsFold(v string) predicate.Clip {
	return predicate.Clip(sql.FieldContainsFold(FieldGenTrimmedVideoPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Clip {
	return predicate.Clip(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Clip {
	return predicate.Clip(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Clip {
	return predicate.Clip(sql.FieldNotNull(FieldDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Clip) predicate.Clip {
	return predicate.Clip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Clip) predicate.Clip {
	return predicate.Clip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clip) predicate.Clip {
	return predicate.Clip(sql.NotPredicates(p))
}
