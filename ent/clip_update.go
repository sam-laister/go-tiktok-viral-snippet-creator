// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sam-laister/tiktok-creator/ent/clip"
	"github.com/sam-laister/tiktok-creator/ent/predicate"
)

// ClipUpdate is the builder for updating Clip entities.
type ClipUpdate struct {
	config
	hooks    []Hook
	mutation *ClipMutation
}

// Where appends a list predicates to the ClipUpdate builder.
func (_u *ClipUpdate) Where(ps ...predicate.Clip) *ClipUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetHash sets the "hash" field.
func (_u *ClipUpdate) SetHash(v string) *ClipUpdate {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableHash(v *string) *ClipUpdate {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetAudioPath sets the "audio_path" field.
func (_u *ClipUpdate) SetAudioPath(v string) *ClipUpdate {
	_u.mutation.SetAudioPath(v)
	return _u
}

// SetNillableAudioPath sets the "audio_path" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableAudioPath(v *string) *ClipUpdate {
	if v != nil {
		_u.SetAudioPath(*v)
	}
	return _u
}

// SetVideoPath sets the "video_path" field.
func (_u *ClipUpdate) SetVideoPath(v string) *ClipUpdate {
	_u.mutation.SetVideoPath(v)
	return _u
}

// SetNillableVideoPath sets the "video_path" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableVideoPath(v *string) *ClipUpdate {
	if v != nil {
		_u.SetVideoPath(*v)
	}
	return _u
}

// SetGenCaptionsPath sets the "gen_captions_path" field.
func (_u *ClipUpdate) SetGenCaptionsPath(v string) *ClipUpdate {
	_u.mutation.SetGenCaptionsPath(v)
	return _u
}

// SetNillableGenCaptionsPath sets the "gen_captions_path" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableGenCaptionsPath(v *string) *ClipUpdate {
	if v != nil {
		_u.SetGenCaptionsPath(*v)
	}
	return _u
}

// ClearGenCaptionsPath clears the value of the "gen_captions_path" field.
func (_u *ClipUpdate) ClearGenCaptionsPath() *ClipUpdate {
	_u.mutation.ClearGenCaptionsPath()
	return _u
}

// SetGenRawVideoPath sets the "gen_raw_video_path" field.
func (_u *ClipUpdate) SetGenRawVideoPath(v string) *ClipUpdate {
	_u.mutation.SetGenRawVideoPath(v)
	return _u
}

// SetNillableGenRawVideoPath sets the "gen_raw_video_path" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableGenRawVideoPath(v *string) *ClipUpdate {
	if v != nil {
		_u.SetGenRawVideoPath(*v)
	}
	return _u
}

// ClearGenRawVideoPath clears the value of the "gen_raw_video_path" field.
func (_u *ClipUpdate) ClearGenRawVideoPath() *ClipUpdate {
	_u.mutation.ClearGenRawVideoPath()
	return _u
}

// SetGenTrimmedVideoPath sets the "gen_trimmed_video_path" field.
func (_u *ClipUpdate) SetGenTrimmedVideoPath(v string) *ClipUpdate {
	_u.mutation.SetGenTrimmedVideoPath(v)
	return _u
}

// SetNillableGenTrimmedVideoPath sets the "gen_trimmed_video_path" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableGenTrimmedVideoPath(v *string) *ClipUpdate {
	if v != nil {
		_u.SetGenTrimmedVideoPath(*v)
	}
	return _u
}

// ClearGenTrimmedVideoPath clears the value of the "gen_trimmed_video_path" field.
func (_u *ClipUpdate) ClearGenTrimmedVideoPath() *ClipUpdate {
	_u.mutation.ClearGenTrimmedVideoPath()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ClipUpdate) SetCreatedAt(v time.Time) *ClipUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableCreatedAt(v *time.Time) *ClipUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ClipUpdate) SetUpdatedAt(v time.Time) *ClipUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableUpdatedAt(v *time.Time) *ClipUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ClipUpdate) SetDeletedAt(v time.Time) *ClipUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ClipUpdate) SetNillableDeletedAt(v *time.Time) *ClipUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ClipUpdate) ClearDeletedAt() *ClipUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the ClipMutation object of the builder.
func (_u *ClipUpdate) Mutation() *ClipMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ClipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClipUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ClipUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClipUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ClipUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clip.Table, clip.Columns, sqlgraph.NewFieldSpec(clip.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(clip.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.AudioPath(); ok {
		_spec.SetField(clip.FieldAudioPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoPath(); ok {
		_spec.SetField(clip.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.GenCaptionsPath(); ok {
		_spec.SetField(clip.FieldGenCaptionsPath, field.TypeString, value)
	}
	if _u.mutation.GenCaptionsPathCleared() {
		_spec.ClearField(clip.FieldGenCaptionsPath, field.TypeString)
	}
	if value, ok := _u.mutation.GenRawVideoPath(); ok {
		_spec.SetField(clip.FieldGenRawVideoPath, field.TypeString, value)
	}
	if _u.mutation.GenRawVideoPathCleared() {
		_spec.ClearField(clip.FieldGenRawVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.GenTrimmedVideoPath(); ok {
		_spec.SetField(clip.FieldGenTrimmedVideoPath, field.TypeString, value)
	}
	if _u.mutation.GenTrimmedVideoPathCleared() {
		_spec.ClearField(clip.FieldGenTrimmedVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(clip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(clip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(clip.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(clip.FieldDeletedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ClipUpdateOne is the builder for updating a single Clip entity.
type ClipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClipMutation
}

// SetHash sets the "hash" field.
func (_u *ClipUpdateOne) SetHash(v string) *ClipUpdateOne {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableHash(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetAudioPath sets the "audio_path" field.
func (_u *ClipUpdateOne) SetAudioPath(v string) *ClipUpdateOne {
	_u.mutation.SetAudioPath(v)
	return _u
}

// SetNillableAudioPath sets the "audio_path" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableAudioPath(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetAudioPath(*v)
	}
	return _u
}

// SetVideoPath sets the "video_path" field.
func (_u *ClipUpdateOne) SetVideoPath(v string) *ClipUpdateOne {
	_u.mutation.SetVideoPath(v)
	return _u
}

// SetNillableVideoPath sets the "video_path" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableVideoPath(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetVideoPath(*v)
	}
	return _u
}

// SetGenCaptionsPath sets the "gen_captions_path" field.
func (_u *ClipUpdateOne) SetGenCaptionsPath(v string) *ClipUpdateOne {
	_u.mutation.SetGenCaptionsPath(v)
	return _u
}

// SetNillableGenCaptionsPath sets the "gen_captions_path" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableGenCaptionsPath(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetGenCaptionsPath(*v)
	}
	return _u
}

// ClearGenCaptionsPath clears the value of the "gen_captions_path" field.
func (_u *ClipUpdateOne) ClearGenCaptionsPath() *ClipUpdateOne {
	_u.mutation.ClearGenCaptionsPath()
	return _u
}

// SetGenRawVideoPath sets the "gen_raw_video_path" field.
func (_u *ClipUpdateOne) SetGenRawVideoPath(v string) *ClipUpdateOne {
	_u.mutation.SetGenRawVideoPath(v)
	return _u
}

// SetNillableGenRawVideoPath sets the "gen_raw_video_path" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableGenRawVideoPath(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetGenRawVideoPath(*v)
	}
	return _u
}

// ClearGenRawVideoPath clears the value of the "gen_raw_video_path" field.
func (_u *ClipUpdateOne) ClearGenRawVideoPath() *ClipUpdateOne {
	_u.mutation.ClearGenRawVideoPath()
	return _u
}

// SetGenTrimmedVideoPath sets the "gen_trimmed_video_path" field.
func (_u *ClipUpdateOne) SetGenTrimmedVideoPath(v string) *ClipUpdateOne {
	_u.mutation.SetGenTrimmedVideoPath(v)
	return _u
}

// SetNillableGenTrimmedVideoPath sets the "gen_trimmed_video_path" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableGenTrimmedVideoPath(v *string) *ClipUpdateOne {
	if v != nil {
		_u.SetGenTrimmedVideoPath(*v)
	}
	return _u
}

// ClearGenTrimmedVideoPath clears the value of the "gen_trimmed_video_path" field.
func (_u *ClipUpdateOne) ClearGenTrimmedVideoPath() *ClipUpdateOne {
	_u.mutation.ClearGenTrimmedVideoPath()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ClipUpdateOne) SetCreatedAt(v time.Time) *ClipUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableCreatedAt(v *time.Time) *ClipUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ClipUpdateOne) SetUpdatedAt(v time.Time) *ClipUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableUpdatedAt(v *time.Time) *ClipUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ClipUpdateOne) SetDeletedAt(v time.Time) *ClipUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ClipUpdateOne) SetNillableDeletedAt(v *time.Time) *ClipUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ClipUpdateOne) ClearDeletedAt() *ClipUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the ClipMutation object of the builder.
func (_u *ClipUpdateOne) Mutation() *ClipMutation {
	return _u.mutation
}

// Where appends a list predicates to the ClipUpdate builder.
func (_u *ClipUpdateOne) Where(ps ...predicate.Clip) *ClipUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ClipUpdateOne) Select(field string, fields ...string) *ClipUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Clip entity.
func (_u *ClipUpdateOne) Save(ctx context.Context) (*Clip, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClipUpdateOne) SaveX(ctx context.Context) *Clip {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ClipUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClipUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ClipUpdateOne) sqlSave(ctx context.Context) (_node *Clip, err error) {
	_spec := sqlgraph.NewUpdateSpec(clip.Table, clip.Columns, sqlgraph.NewFieldSpec(clip.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clip.FieldID)
		for _, f := range fields {
			if !clip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(clip.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.AudioPath(); ok {
		_spec.SetField(clip.FieldAudioPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoPath(); ok {
		_spec.SetField(clip.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.GenCaptionsPath(); ok {
		_spec.SetField(clip.FieldGenCaptionsPath, field.TypeString, value)
	}
	if _u.mutation.GenCaptionsPathCleared() {
		_spec.ClearField(clip.FieldGenCaptionsPath, field.TypeString)
	}
	if value, ok := _u.mutation.GenRawVideoPath(); ok {
		_spec.SetField(clip.FieldGenRawVideoPath, field.TypeString, value)
	}
	if _u.mutation.GenRawVideoPathCleared() {
		_spec.ClearField(clip.FieldGenRawVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.GenTrimmedVideoPath(); ok {
		_spec.SetField(clip.FieldGenTrimmedVideoPath, field.TypeString, value)
	}
	if _u.mutation.GenTrimmedVideoPathCleared() {
		_spec.ClearField(clip.FieldGenTrimmedVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(clip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(clip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(clip.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(clip.FieldDeletedAt, field.TypeTime)
	}
	_node = &Clip{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
