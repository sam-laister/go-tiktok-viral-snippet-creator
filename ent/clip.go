// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sam-laister/tiktok-creator/ent/clip"
)

// Clip is the model entity for the Clip schema.
type Clip struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// AudioPath holds the value of the "audio_path" field.
	AudioPath string `json:"audio_path,omitempty"`
	// VideoPath holds the value of the "video_path" field.
	VideoPath string `json:"video_path,omitempty"`
	// GenCaptionsPath holds the value of the "gen_captions_path" field.
	GenCaptionsPath *string `json:"gen_captions_path,omitempty"`
	// GenRawVideoPath holds the value of the "gen_raw_video_path" field.
	GenRawVideoPath *string `json:"gen_raw_video_path,omitempty"`
	// GenTrimmedVideoPath holds the value of the "gen_trimmed_video_path" field.
	GenTrimmedVideoPath *string `json:"gen_trimmed_video_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clip.FieldID:
			values[i] = new(sql.NullInt64)
		case clip.FieldHash, clip.FieldAudioPath, clip.FieldVideoPath, clip.FieldGenCaptionsPath, clip.FieldGenRawVideoPath, clip.FieldGenTrimmedVideoPath:
			values[i] = new(sql.NullString)
		case clip.FieldCreatedAt, clip.FieldUpdatedAt, clip.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clip fields.
func (_m *Clip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case clip.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				_m.Hash = value.String
			}
		case clip.FieldAudioPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio_path", values[i])
			} else if value.Valid {
				_m.AudioPath = value.String
			}
		case clip.FieldVideoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_path", values[i])
			} else if value.Valid {
				_m.VideoPath = value.String
			}
		case clip.FieldGenCaptionsPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gen_captions_path", values[i])
			} else if value.Valid {
				_m.GenCaptionsPath = new(string)
				*_m.GenCaptionsPath = value.String
			}
		case clip.FieldGenRawVideoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gen_raw_video_path", values[i])
			} else if value.Valid {
				_m.GenRawVideoPath = new(string)
				*_m.GenRawVideoPath = value.String
			}
		case clip.FieldGenTrimmedVideoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gen_trimmed_video_path", values[i])
			} else if value.Valid {
				_m.GenTrimmedVideoPath = new(string)
				*_m.GenTrimmedVideoPath = value.String
			}
		case clip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case clip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case clip.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Clip.
// This includes values selected through modifiers, order, etc.
func (_m *Clip) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Clip.
// Note that you need to call Clip.Unwrap() before calling this method if this Clip
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Clip) Update() *ClipUpdateOne {
	return NewClipClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Clip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Clip) Unwrap() *Clip {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clip is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Clip) String() string {
	var builder strings.Builder
	builder.WriteString("Clip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("hash=")
	builder.WriteString(_m.Hash)
	builder.WriteString(", ")
	builder.WriteString("audio_path=")
	builder.WriteString(_m.AudioPath)
	builder.WriteString(", ")
	builder.WriteString("video_path=")
	builder.WriteString(_m.VideoPath)
	builder.WriteString(", ")
	if v := _m.GenCaptionsPath; v != nil {
		builder.WriteString("gen_captions_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.GenRawVideoPath; v != nil {
		builder.WriteString("gen_raw_video_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.GenTrimmedVideoPath; v != nil {
		builder.WriteString("gen_trimmed_video_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Clips is a parsable slice of Clip.
type Clips []*Clip
