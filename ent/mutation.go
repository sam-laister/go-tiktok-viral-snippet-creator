// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sam-laister/tiktok-creator/ent/clip"
	"github.com/sam-laister/tiktok-creator/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClip = "Clip"
)

// ClipMutation represents an operation that mutates the Clip nodes in the graph.
type ClipMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	hash                   *string
	audio_path             *string
	video_path             *string
	gen_captions_path      *string
	gen_raw_video_path     *string
	gen_trimmed_video_path *string
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Clip, error)
	predicates             []predicate.Clip
}

var _ ent.Mutation = (*ClipMutation)(nil)

// clipOption allows management of the mutation configuration using functional options.
type clipOption func(*ClipMutation)

// newClipMutation creates new mutation for the Clip entity.
func newClipMutation(c config, op Op, opts ...clipOption) *ClipMutation {
	m := &ClipMutation{
		config:        c,
		op:            op,
		typ:           TypeClip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClipID sets the ID field of the mutation.
func withClipID(id int) clipOption {
	return func(m *ClipMutation) {
		var (
			err   error
			once  sync.Once
			value *Clip
		)
		m.oldValue = func(ctx context.Context) (*Clip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Clip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClip sets the old Clip of the mutation.
func withClip(node *Clip) clipOption {
	return func(m *ClipMutation) {
		m.oldValue = func(context.Context) (*Clip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Clip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *ClipMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *ClipMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *ClipMutation) ResetHash() {
	m.hash = nil
}

// SetAudioPath sets the "audio_path" field.
func (m *ClipMutation) SetAudioPath(s string) {
	m.audio_path = &s
}

// AudioPath returns the value of the "audio_path" field in the mutation.
func (m *ClipMutation) AudioPath() (r string, exists bool) {
	v := m.audio_path
	if v == nil {
		return
	}
	return *v, true
}

// OldAudioPath returns the old "audio_path" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldAudioPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAudioPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAudioPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudioPath: %w", err)
	}
	return oldValue.AudioPath, nil
}

// ResetAudioPath resets all changes to the "audio_path" field.
func (m *ClipMutation) ResetAudioPath() {
	m.audio_path = nil
}

// SetVideoPath sets the "video_path" field.
func (m *ClipMutation) SetVideoPath(s string) {
	m.video_path = &s
}

// VideoPath returns the value of the "video_path" field in the mutation.
func (m *ClipMutation) VideoPath() (r string, exists bool) {
	v := m.video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoPath returns the old "video_path" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldVideoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoPath: %w", err)
	}
	return oldValue.VideoPath, nil
}

// ResetVideoPath resets all changes to the "video_path" field.
func (m *ClipMutation) ResetVideoPath() {
	m.video_path = nil
}

// SetGenCaptionsPath sets the "gen_captions_path" field.
func (m *ClipMutation) SetGenCaptionsPath(s string) {
	m.gen_captions_path = &s
}

// GenCaptionsPath returns the value of the "gen_captions_path" field in the mutation.
func (m *ClipMutation) GenCaptionsPath() (r string, exists bool) {
	v := m.gen_captions_path
	if v == nil {
		return
	}
	return *v, true
}

// OldGenCaptionsPath returns the old "gen_captions_path" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldGenCaptionsPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenCaptionsPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenCaptionsPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenCaptionsPath: %w", err)
	}
	return oldValue.GenCaptionsPath, nil
}

// ClearGenCaptionsPath clears the value of the "gen_captions_path" field.
func (m *ClipMutation) ClearGenCaptionsPath() {
	m.gen_captions_path = nil
	m.clearedFields[clip.FieldGenCaptionsPath] = struct{}{}
}

// GenCaptionsPathCleared returns if the "gen_captions_path" field was cleared in this mutation.
func (m *ClipMutation) GenCaptionsPathCleared() bool {
	_, ok := m.clearedFields[clip.FieldGenCaptionsPath]
	return ok
}

// ResetGenCaptionsPath resets all changes to the "gen_captions_path" field.
func (m *ClipMutation) ResetGenCaptionsPath() {
	m.gen_captions_path = nil
	delete(m.clearedFields, clip.FieldGenCaptionsPath)
}

// SetGenRawVideoPath sets the "gen_raw_video_path" field.
func (m *ClipMutation) SetGenRawVideoPath(s string) {
	m.gen_raw_video_path = &s
}

// GenRawVideoPath returns the value of the "gen_raw_video_path" field in the mutation.
func (m *ClipMutation) GenRawVideoPath() (r string, exists bool) {
	v := m.gen_raw_video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldGenRawVideoPath returns the old "gen_raw_video_path" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldGenRawVideoPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenRawVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenRawVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenRawVideoPath: %w", err)
	}
	return oldValue.GenRawVideoPath, nil
}

// ClearGenRawVideoPath clears the value of the "gen_raw_video_path" field.
func (m *ClipMutation) ClearGenRawVideoPath() {
	m.gen_raw_video_path = nil
	m.clearedFields[clip.FieldGenRawVideoPath] = struct{}{}
}

// GenRawVideoPathCleared returns if the "gen_raw_video_path" field was cleared in this mutation.
func (m *ClipMutation) GenRawVideoPathCleared() bool {
	_, ok := m.clearedFields[clip.FieldGenRawVideoPath]
	return ok
}

// ResetGenRawVideoPath resets all changes to the "gen_raw_video_path" field.
func (m *ClipMutation) ResetGenRawVideoPath() {
	m.gen_raw_video_path = nil
	delete(m.clearedFields, clip.FieldGenRawVideoPath)
}

// SetGenTrimmedVideoPath sets the "gen_trimmed_video_path" field.
func (m *ClipMutation) SetGenTrimmedVideoPath(s string) {
	m.gen_trimmed_video_path = &s
}

// GenTrimmedVideoPath returns the value of the "gen_trimmed_video_path" field in the mutation.
func (m *ClipMutation) GenTrimmedVideoPath() (r string, exists bool) {
	v := m.gen_trimmed_video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldGenTrimmedVideoPath returns the old "gen_trimmed_video_path" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldGenTrimmedVideoPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenTrimmedVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenTrimmedVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenTrimmedVideoPath: %w", err)
	}
	return oldValue.GenTrimmedVideoPath, nil
}

// ClearGenTrimmedVideoPath clears the value of the "gen_trimmed_video_path" field.
func (m *ClipMutation) ClearGenTrimmedVideoPath() {
	m.gen_trimmed_video_path = nil
	m.clearedFields[clip.FieldGenTrimmedVideoPath] = struct{}{}
}

// GenTrimmedVideoPathCleared returns if the "gen_trimmed_video_path" field was cleared in this mutation.
func (m *ClipMutation) GenTrimmedVideoPathCleared() bool {
	_, ok := m.clearedFields[clip.FieldGenTrimmedVideoPath]
	return ok
}

// ResetGenTrimmedVideoPath resets all changes to the "gen_trimmed_video_path" field.
func (m *ClipMutation) ResetGenTrimmedVideoPath() {
	m.gen_trimmed_video_path = nil
	delete(m.clearedFields, clip.FieldGenTrimmedVideoPath)
}

// SetCreatedAt sets the "created_at" field.
func (m *ClipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ClipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ClipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ClipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ClipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ClipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ClipMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ClipMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ClipMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[clip.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ClipMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[clip.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ClipMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, clip.FieldDeletedAt)
}

// Where appends a list predicates to the ClipMutation builder.
func (m *ClipMutation) Where(ps ...predicate.Clip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Clip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Clip).
func (m *ClipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClipMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.hash != nil {
		fields = append(fields, clip.FieldHash)
	}
	if m.audio_path != nil {
		fields = append(fields, clip.FieldAudioPath)
	}
	if m.video_path != nil {
		fields = append(fields, clip.FieldVideoPath)
	}
	if m.gen_captions_path != nil {
		fields = append(fields, clip.FieldGenCaptionsPath)
	}
	if m.gen_raw_video_path != nil {
		fields = append(fields, clip.FieldGenRawVideoPath)
	}
	if m.gen_trimmed_video_path != nil {
		fields = append(fields, clip.FieldGenTrimmedVideoPath)
	}
	if m.created_at != nil {
		fields = append(fields, clip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, clip.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, clip.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clip.FieldHash:
		return m.Hash()
	case clip.FieldAudioPath:
		return m.AudioPath()
	case clip.FieldVideoPath:
		return m.VideoPath()
	case clip.FieldGenCaptionsPath:
		return m.GenCaptionsPath()
	case clip.FieldGenRawVideoPath:
		return m.GenRawVideoPath()
	case clip.FieldGenTrimmedVideoPath:
		return m.GenTrimmedVideoPath()
	case clip.FieldCreatedAt:
		return m.CreatedAt()
	case clip.FieldUpdatedAt:
		return m.UpdatedAt()
	case clip.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clip.FieldHash:
		return m.OldHash(ctx)
	case clip.FieldAudioPath:
		return m.OldAudioPath(ctx)
	case clip.FieldVideoPath:
		return m.OldVideoPath(ctx)
	case clip.FieldGenCaptionsPath:
		return m.OldGenCaptionsPath(ctx)
	case clip.FieldGenRawVideoPath:
		return m.OldGenRawVideoPath(ctx)
	case clip.FieldGenTrimmedVideoPath:
		return m.OldGenTrimmedVideoPath(ctx)
	case clip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case clip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case clip.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Clip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clip.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case clip.FieldAudioPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudioPath(v)
		return nil
	case clip.FieldVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoPath(v)
		return nil
	case clip.FieldGenCaptionsPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenCaptionsPath(v)
		return nil
	case clip.FieldGenRawVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenRawVideoPath(v)
		return nil
	case clip.FieldGenTrimmedVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenTrimmedVideoPath(v)
		return nil
	case clip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case clip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case clip.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Clip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Clip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(clip.FieldGenCaptionsPath) {
		fields = append(fields, clip.FieldGenCaptionsPath)
	}
	if m.FieldCleared(clip.FieldGenRawVideoPath) {
		fields = append(fields, clip.FieldGenRawVideoPath)
	}
	if m.FieldCleared(clip.FieldGenTrimmedVideoPath) {
		fields = append(fields, clip.FieldGenTrimmedVideoPath)
	}
	if m.FieldCleared(clip.FieldDeletedAt) {
		fields = append(fields, clip.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClipMutation) ClearField(name string) error {
	switch name {
	case clip.FieldGenCaptionsPath:
		m.ClearGenCaptionsPath()
		return nil
	case clip.FieldGenRawVideoPath:
		m.ClearGenRawVideoPath()
		return nil
	case clip.FieldGenTrimmedVideoPath:
		m.ClearGenTrimmedVideoPath()
		return nil
	case clip.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Clip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClipMutation) ResetField(name string) error {
	switch name {
	case clip.FieldHash:
		m.ResetHash()
		return nil
	case clip.FieldAudioPath:
		m.ResetAudioPath()
		return nil
	case clip.FieldVideoPath:
		m.ResetVideoPath()
		return nil
	case clip.FieldGenCaptionsPath:
		m.ResetGenCaptionsPath()
		return nil
	case clip.FieldGenRawVideoPath:
		m.ResetGenRawVideoPath()
		return nil
	case clip.FieldGenTrimmedVideoPath:
		m.ResetGenTrimmedVideoPath()
		return nil
	case clip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case clip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case clip.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Clip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClipMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClipMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClipMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClipMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Clip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClipMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Clip edge %s", name)
}
