// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sam-laister/tiktok-creator/ent/clip"
)

// ClipCreate is the builder for creating a Clip entity.
type ClipCreate struct {
	config
	mutation *ClipMutation
	hooks    []Hook
}

// SetHash sets the "hash" field.
func (_c *ClipCreate) SetHash(v string) *ClipCreate {
	_c.mutation.SetHash(v)
	return _c
}

// SetAudioPath sets the "audio_path" field.
func (_c *ClipCreate) SetAudioPath(v string) *ClipCreate {
	_c.mutation.SetAudioPath(v)
	return _c
}

// SetVideoPath sets the "video_path" field.
func (_c *ClipCreate) SetVideoPath(v string) *ClipCreate {
	_c.mutation.SetVideoPath(v)
	return _c
}

// SetGenCaptionsPath sets the "gen_captions_path" field.
func (_c *ClipCreate) SetGenCaptionsPath(v string) *ClipCreate {
	_c.mutation.SetGenCaptionsPath(v)
	return _c
}

// SetNillableGenCaptionsPath sets the "gen_captions_path" field if the given value is not nil.
func (_c *ClipCreate) SetNillableGenCaptionsPath(v *string) *ClipCreate {
	if v != nil {
		_c.SetGenCaptionsPath(*v)
	}
	return _c
}

// SetGenRawVideoPath sets the "gen_raw_video_path" field.
func (_c *ClipCreate) SetGenRawVideoPath(v string) *ClipCreate {
	_c.mutation.SetGenRawVideoPath(v)
	return _c
}

// SetNillableGenRawVideoPath sets the "gen_raw_video_path" field if the given value is not nil.
func (_c *ClipCreate) SetNillableGenRawVideoPath(v *string) *ClipCreate {
	if v != nil {
		_c.SetGenRawVideoPath(*v)
	}
	return _c
}

// SetGenTrimmedVideoPath sets the "gen_trimmed_video_path" field.
func (_c *ClipCreate) SetGenTrimmedVideoPath(v string) *ClipCreate {
	_c.mutation.SetGenTrimmedVideoPath(v)
	return _c
}

// SetNillableGenTrimmedVideoPath sets the "gen_trimmed_video_path" field if the given value is not nil.
func (_c *ClipCreate) SetNillableGenTrimmedVideoPath(v *string) *ClipCreate {
	if v != nil {
		_c.SetGenTrimmedVideoPath(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ClipCreate) SetCreatedAt(v time.Time) *ClipCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ClipCreate) SetNillableCreatedAt(v *time.Time) *ClipCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ClipCreate) SetUpdatedAt(v time.Time) *ClipCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ClipCreate) SetNillableUpdatedAt(v *time.Time) *ClipCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ClipCreate) SetDeletedAt(v time.Time) *ClipCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ClipCreate) SetNillableDeletedAt(v *time.Time) *ClipCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// Mutation returns the ClipMutation object of the builder.
func (_c *ClipCreate) Mutation() *ClipMutation {
	return _c.mutation
}

// Save creates the Clip in the database.
func (_c *ClipCreate) Save(ctx context.Context) (*Clip, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ClipCreate) SaveX(ctx context.Context) *Clip {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClipCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClipCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ClipCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := clip.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := clip.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ClipCreate) check() error {
	if _, ok := _c.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Clip.hash"`)}
	}
	if _, ok := _c.mutation.AudioPath(); !ok {
		return &ValidationError{Name: "audio_path", err: errors.New(`ent: missing required field "Clip.audio_path"`)}
	}
	if _, ok := _c.mutation.VideoPath(); !ok {
		return &ValidationError{Name: "video_path", err: errors.New(`ent: missing required field "Clip.video_path"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Clip.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Clip.updated_at"`)}
	}
	return nil
}

func (_c *ClipCreate) sqlSave(ctx context.Context) (*Clip, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ClipCreate) createSpec() (*Clip, *sqlgraph.CreateSpec) {
	var (
		_node = &Clip{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(clip.Table, sqlgraph.NewFieldSpec(clip.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Hash(); ok {
		_spec.SetField(clip.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := _c.mutation.AudioPath(); ok {
		_spec.SetField(clip.FieldAudioPath, field.TypeString, value)
		_node.AudioPath = value
	}
	if value, ok := _c.mutation.VideoPath(); ok {
		_spec.SetField(clip.FieldVideoPath, field.TypeString, value)
		_node.VideoPath = value
	}
	if value, ok := _c.mutation.GenCaptionsPath(); ok {
		_spec.SetField(clip.FieldGenCaptionsPath, field.TypeString, value)
		_node.GenCaptionsPath = &value
	}
	if value, ok := _c.mutation.GenRawVideoPath(); ok {
		_spec.SetField(clip.FieldGenRawVideoPath, field.TypeString, value)
		_node.GenRawVideoPath = &value
	}
	if value, ok := _c.mutation.GenTrimmedVideoPath(); ok {
		_spec.SetField(clip.FieldGenTrimmedVideoPath, field.TypeString, value)
		_node.GenTrimmedVideoPath = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(clip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(clip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(clip.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// ClipCreateBulk is the builder for creating many Clip entities in bulk.
type ClipCreateBulk struct {
	config
	err      error
	builders []*ClipCreate
}

// Save creates the Clip entities in the database.
func (_c *ClipCreateBulk) Save(ctx context.Context) ([]*Clip, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Clip, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ClipCreateBulk) SaveX(ctx context.Context) []*Clip {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClipCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClipCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
